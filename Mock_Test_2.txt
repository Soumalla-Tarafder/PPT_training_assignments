'''
Given a non-negative integer x, return the square root of x rounded down 
to the nearest integer. The returned integer should be non-negative as 
well. You must not use any built-in exponent function or operator.

'''
def findSquareRoot(n):
    i=1
    squeareRoot=0
    while(i<n):
        #print(i)
        if(round(i*i,4) == n):
            squeareRoot = i
            break;
        elif(i*i > n):
            squeareRoot = i-1
            break;
        i+=0.1   
    print(round(squeareRoot))

n=3
findSquareRoot(n)



'''
You are given two non-empty linked lists representing two non-negative 
integers. The digits are stored in reverse order, and each of their nodes 
contains a single digit. Add the two numbers and return the sum as a 
linked list.

You may assume the two numbers do not contain any leading zero, except 
the number 0 itself.


Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 
= 807.

Example 2:

Input: l1 = [0], l2 = [0] Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1]

 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9 It is guaranteed that the list represents a number 
that does not have leading zeros.




'''
def reverse(n1):
    prev=None
    after=None
    curr = n1
    while curr is not None:
        after=curr.next
        curr.next=prev
        prev = curr
        curr=after
    return prev
        
        
def addTwoLists(n1,n2):
    revN1=reverse(n1)
    revN2=reverse(n2)
    
    summ=0
    carry=0
    res=None
    prev=None
    #printList(revN1)
    while(revN1 is not None or revN2 is not None):
        summ = carry+(revN1.data if revN1 else 0) + (revN2.data if revN2 else 0) 
        #print(summ)
        carry = 1 if summ>=10 else 0
        summ=summ%10
        
        temp=Node(summ)
        
        if(res is None):
            res=temp
        else:
            prev.next=temp
        
        prev=temp
        
        if revN1:
            revN1 = revN1.next
        if revN2:
            revN2 = revN2.next
            
    if carry >0 :
        temp.next = Node(carry)
    
    ans = reverse(res)
    return ans
        
        
        
        
        
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
 
    def insert(self, val):
        if self.head is None:
            self.head = Node(val)
            self.tail = self.head
        else:
            self.tail.next = Node(val)
            self.tail = self.tail.next

def printList(n):
    while n:
        print(n.data, end = ' ')
        n = n.next
    print()

arr1 = [9,9,9,9,9,9,9]
n1 = LinkedList()
for i in arr1:
    n1.insert(i)
    
    #printList(LL1.head)
     
arr2 = [9,9,9,9]
n2 = LinkedList()
for i in arr2:
    n2.insert(i)
    
    #printList(LL2.head)
     
res = addTwoLists(n1.head, n2.head)
print("Summation Is", end = " ")
printList(res)





